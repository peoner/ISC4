                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (UNIX)
                              4 ; This file was generated Wed Nov 15 13:16:37 2017
                              5 ;--------------------------------------------------------
                              6 	.module async
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _ReadUART
                             13 	.globl _PrintString
                             14 	.globl _WriteUART
                             15 	.globl _PopFIFO
                             16 	.globl _PushFIFO
                             17 	.globl _init_sio
                             18 	.globl _SPR0
                             19 	.globl _SPR1
                             20 	.globl _CPHA
                             21 	.globl _CPOL
                             22 	.globl _SPIM
                             23 	.globl _SPE
                             24 	.globl _WCOL
                             25 	.globl _ISPI
                             26 	.globl _I2CI
                             27 	.globl _I2CTX
                             28 	.globl _I2CRS
                             29 	.globl _I2CM
                             30 	.globl _MDI
                             31 	.globl _MCO
                             32 	.globl _MDE
                             33 	.globl _MDO
                             34 	.globl _CS0
                             35 	.globl _CS1
                             36 	.globl _CS2
                             37 	.globl _CS3
                             38 	.globl _SCONV
                             39 	.globl _CCONV
                             40 	.globl _DMA
                             41 	.globl _ADCI
                             42 	.globl _P
                             43 	.globl _F1
                             44 	.globl _OV
                             45 	.globl _RS0
                             46 	.globl _RS1
                             47 	.globl _F0
                             48 	.globl _AC
                             49 	.globl _CY
                             50 	.globl _CAP2
                             51 	.globl _CNT2
                             52 	.globl _TR2
                             53 	.globl _XEN
                             54 	.globl _TCLK
                             55 	.globl _RCLK
                             56 	.globl _EXF2
                             57 	.globl _TF2
                             58 	.globl _WDE
                             59 	.globl _WDS
                             60 	.globl _WDR2
                             61 	.globl _WDR1
                             62 	.globl _PRE0
                             63 	.globl _PRE1
                             64 	.globl _PRE2
                             65 	.globl _PX0
                             66 	.globl _PT0
                             67 	.globl _PX1
                             68 	.globl _PT1
                             69 	.globl _PS
                             70 	.globl _PT2
                             71 	.globl _PADC
                             72 	.globl _PSI
                             73 	.globl _RXD
                             74 	.globl _TXD
                             75 	.globl _INT0
                             76 	.globl _INT1
                             77 	.globl _T0
                             78 	.globl _T1
                             79 	.globl _WR
                             80 	.globl _RD
                             81 	.globl _EX0
                             82 	.globl _ET0
                             83 	.globl _EX1
                             84 	.globl _ET1
                             85 	.globl _ES
                             86 	.globl _ET2
                             87 	.globl _EADC
                             88 	.globl _EA
                             89 	.globl _RI
                             90 	.globl _TI
                             91 	.globl _RB8
                             92 	.globl _TB8
                             93 	.globl _REN
                             94 	.globl _SM2
                             95 	.globl _SM1
                             96 	.globl _SM0
                             97 	.globl _T2
                             98 	.globl _T2EX
                             99 	.globl _IT0
                            100 	.globl _IE0
                            101 	.globl _IT1
                            102 	.globl _IE1
                            103 	.globl _TR0
                            104 	.globl _TF0
                            105 	.globl _TR1
                            106 	.globl _TF1
                            107 	.globl _DACCON
                            108 	.globl _DAC1H
                            109 	.globl _DAC1L
                            110 	.globl _DAC0H
                            111 	.globl _DAC0L
                            112 	.globl _SPICON
                            113 	.globl _SPIDAT
                            114 	.globl _ADCCON3
                            115 	.globl _ADCGAINH
                            116 	.globl _ADCGAINL
                            117 	.globl _ADCOFSH
                            118 	.globl _ADCOFSL
                            119 	.globl _B
                            120 	.globl _ADCCON1
                            121 	.globl _I2CCON
                            122 	.globl _ACC
                            123 	.globl _PSMCON
                            124 	.globl _ADCDATAH
                            125 	.globl _ADCDATAL
                            126 	.globl _ADCCON2
                            127 	.globl _DMAP
                            128 	.globl _DMAH
                            129 	.globl _DMAL
                            130 	.globl _PSW
                            131 	.globl _TH2
                            132 	.globl _TL2
                            133 	.globl _RCAP2H
                            134 	.globl _RCAP2L
                            135 	.globl _T2CON
                            136 	.globl _EADRL
                            137 	.globl _WDCON
                            138 	.globl _EDATA4
                            139 	.globl _EDATA3
                            140 	.globl _EDATA2
                            141 	.globl _EDATA1
                            142 	.globl _ETIM3
                            143 	.globl _ETIM2
                            144 	.globl _ETIM1
                            145 	.globl _ECON
                            146 	.globl _IP
                            147 	.globl _P3
                            148 	.globl _IE2
                            149 	.globl _IE
                            150 	.globl _P2
                            151 	.globl _I2CADD
                            152 	.globl _I2CDAT
                            153 	.globl _SBUF
                            154 	.globl _SCON
                            155 	.globl _P1
                            156 	.globl _TH1
                            157 	.globl _TH0
                            158 	.globl _TL1
                            159 	.globl _TL0
                            160 	.globl _TMOD
                            161 	.globl _TCON
                            162 	.globl _PCON
                            163 	.globl _DPP
                            164 	.globl _DPH
                            165 	.globl _DPL
                            166 	.globl _SP
                            167 	.globl _P0
                            168 	.globl _TRANSFER_NOW
                            169 	.globl _rFIFO
                            170 	.globl _wFIFO
                            171 	.globl _SIO_ISR
                            172 ;--------------------------------------------------------
                            173 ; special function registers
                            174 ;--------------------------------------------------------
                            175 	.area RSEG    (DATA)
                    0080    176 _P0	=	0x0080
                    0081    177 _SP	=	0x0081
                    0082    178 _DPL	=	0x0082
                    0083    179 _DPH	=	0x0083
                    0084    180 _DPP	=	0x0084
                    0087    181 _PCON	=	0x0087
                    0088    182 _TCON	=	0x0088
                    0089    183 _TMOD	=	0x0089
                    008A    184 _TL0	=	0x008a
                    008B    185 _TL1	=	0x008b
                    008C    186 _TH0	=	0x008c
                    008D    187 _TH1	=	0x008d
                    0090    188 _P1	=	0x0090
                    0098    189 _SCON	=	0x0098
                    0099    190 _SBUF	=	0x0099
                    009A    191 _I2CDAT	=	0x009a
                    009B    192 _I2CADD	=	0x009b
                    00A0    193 _P2	=	0x00a0
                    00A8    194 _IE	=	0x00a8
                    00A9    195 _IE2	=	0x00a9
                    00B0    196 _P3	=	0x00b0
                    00B8    197 _IP	=	0x00b8
                    00B9    198 _ECON	=	0x00b9
                    00BA    199 _ETIM1	=	0x00ba
                    00BB    200 _ETIM2	=	0x00bb
                    00C4    201 _ETIM3	=	0x00c4
                    00BC    202 _EDATA1	=	0x00bc
                    00BD    203 _EDATA2	=	0x00bd
                    00BE    204 _EDATA3	=	0x00be
                    00BF    205 _EDATA4	=	0x00bf
                    00C0    206 _WDCON	=	0x00c0
                    00C6    207 _EADRL	=	0x00c6
                    00C8    208 _T2CON	=	0x00c8
                    00CA    209 _RCAP2L	=	0x00ca
                    00CB    210 _RCAP2H	=	0x00cb
                    00CC    211 _TL2	=	0x00cc
                    00CD    212 _TH2	=	0x00cd
                    00D0    213 _PSW	=	0x00d0
                    00D2    214 _DMAL	=	0x00d2
                    00D3    215 _DMAH	=	0x00d3
                    00D4    216 _DMAP	=	0x00d4
                    00D8    217 _ADCCON2	=	0x00d8
                    00D9    218 _ADCDATAL	=	0x00d9
                    00DA    219 _ADCDATAH	=	0x00da
                    00DF    220 _PSMCON	=	0x00df
                    00E0    221 _ACC	=	0x00e0
                    00E8    222 _I2CCON	=	0x00e8
                    00EF    223 _ADCCON1	=	0x00ef
                    00F0    224 _B	=	0x00f0
                    00F1    225 _ADCOFSL	=	0x00f1
                    00F2    226 _ADCOFSH	=	0x00f2
                    00F3    227 _ADCGAINL	=	0x00f3
                    00F4    228 _ADCGAINH	=	0x00f4
                    00F5    229 _ADCCON3	=	0x00f5
                    00F7    230 _SPIDAT	=	0x00f7
                    00F8    231 _SPICON	=	0x00f8
                    00F9    232 _DAC0L	=	0x00f9
                    00FA    233 _DAC0H	=	0x00fa
                    00FB    234 _DAC1L	=	0x00fb
                    00FC    235 _DAC1H	=	0x00fc
                    00FD    236 _DACCON	=	0x00fd
                            237 ;--------------------------------------------------------
                            238 ; special function bits
                            239 ;--------------------------------------------------------
                            240 	.area RSEG    (DATA)
                    008F    241 _TF1	=	0x008f
                    008E    242 _TR1	=	0x008e
                    008D    243 _TF0	=	0x008d
                    008C    244 _TR0	=	0x008c
                    008B    245 _IE1	=	0x008b
                    008A    246 _IT1	=	0x008a
                    0089    247 _IE0	=	0x0089
                    0088    248 _IT0	=	0x0088
                    0091    249 _T2EX	=	0x0091
                    0090    250 _T2	=	0x0090
                    009F    251 _SM0	=	0x009f
                    009E    252 _SM1	=	0x009e
                    009D    253 _SM2	=	0x009d
                    009C    254 _REN	=	0x009c
                    009B    255 _TB8	=	0x009b
                    009A    256 _RB8	=	0x009a
                    0099    257 _TI	=	0x0099
                    0098    258 _RI	=	0x0098
                    00AF    259 _EA	=	0x00af
                    00AE    260 _EADC	=	0x00ae
                    00AD    261 _ET2	=	0x00ad
                    00AC    262 _ES	=	0x00ac
                    00AB    263 _ET1	=	0x00ab
                    00AA    264 _EX1	=	0x00aa
                    00A9    265 _ET0	=	0x00a9
                    00A8    266 _EX0	=	0x00a8
                    00B7    267 _RD	=	0x00b7
                    00B6    268 _WR	=	0x00b6
                    00B5    269 _T1	=	0x00b5
                    00B4    270 _T0	=	0x00b4
                    00B3    271 _INT1	=	0x00b3
                    00B2    272 _INT0	=	0x00b2
                    00B1    273 _TXD	=	0x00b1
                    00B0    274 _RXD	=	0x00b0
                    00BF    275 _PSI	=	0x00bf
                    00BE    276 _PADC	=	0x00be
                    00BD    277 _PT2	=	0x00bd
                    00BC    278 _PS	=	0x00bc
                    00BB    279 _PT1	=	0x00bb
                    00BA    280 _PX1	=	0x00ba
                    00B9    281 _PT0	=	0x00b9
                    00B8    282 _PX0	=	0x00b8
                    00C7    283 _PRE2	=	0x00c7
                    00C6    284 _PRE1	=	0x00c6
                    00C5    285 _PRE0	=	0x00c5
                    00C3    286 _WDR1	=	0x00c3
                    00C2    287 _WDR2	=	0x00c2
                    00C1    288 _WDS	=	0x00c1
                    00C0    289 _WDE	=	0x00c0
                    00CF    290 _TF2	=	0x00cf
                    00CE    291 _EXF2	=	0x00ce
                    00CD    292 _RCLK	=	0x00cd
                    00CC    293 _TCLK	=	0x00cc
                    00CB    294 _XEN	=	0x00cb
                    00CA    295 _TR2	=	0x00ca
                    00C9    296 _CNT2	=	0x00c9
                    00C8    297 _CAP2	=	0x00c8
                    00D7    298 _CY	=	0x00d7
                    00D6    299 _AC	=	0x00d6
                    00D5    300 _F0	=	0x00d5
                    00D4    301 _RS1	=	0x00d4
                    00D3    302 _RS0	=	0x00d3
                    00D2    303 _OV	=	0x00d2
                    00D1    304 _F1	=	0x00d1
                    00D0    305 _P	=	0x00d0
                    00DF    306 _ADCI	=	0x00df
                    00DE    307 _DMA	=	0x00de
                    00DD    308 _CCONV	=	0x00dd
                    00DC    309 _SCONV	=	0x00dc
                    00DB    310 _CS3	=	0x00db
                    00DA    311 _CS2	=	0x00da
                    00D9    312 _CS1	=	0x00d9
                    00D8    313 _CS0	=	0x00d8
                    00EF    314 _MDO	=	0x00ef
                    00EE    315 _MDE	=	0x00ee
                    00ED    316 _MCO	=	0x00ed
                    00EC    317 _MDI	=	0x00ec
                    00EB    318 _I2CM	=	0x00eb
                    00EA    319 _I2CRS	=	0x00ea
                    00E9    320 _I2CTX	=	0x00e9
                    00E8    321 _I2CI	=	0x00e8
                    00FF    322 _ISPI	=	0x00ff
                    00FE    323 _WCOL	=	0x00fe
                    00FD    324 _SPE	=	0x00fd
                    00FC    325 _SPIM	=	0x00fc
                    00FB    326 _CPOL	=	0x00fb
                    00FA    327 _CPHA	=	0x00fa
                    00F9    328 _SPR1	=	0x00f9
                    00F8    329 _SPR0	=	0x00f8
                            330 ;--------------------------------------------------------
                            331 ; overlayable register banks
                            332 ;--------------------------------------------------------
                            333 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     334 	.ds 8
                            335 ;--------------------------------------------------------
                            336 ; overlayable bit register bank
                            337 ;--------------------------------------------------------
                            338 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     339 bits:
   0000                     340 	.ds 1
                    8000    341 	b0 = bits[0]
                    8100    342 	b1 = bits[1]
                    8200    343 	b2 = bits[2]
                    8300    344 	b3 = bits[3]
                    8400    345 	b4 = bits[4]
                    8500    346 	b5 = bits[5]
                    8600    347 	b6 = bits[6]
                    8700    348 	b7 = bits[7]
                            349 ;--------------------------------------------------------
                            350 ; internal ram data
                            351 ;--------------------------------------------------------
                            352 	.area DSEG    (DATA)
   0000                     353 _wFIFO::
   0000                     354 	.ds 18
   0012                     355 _rFIFO::
   0012                     356 	.ds 18
                            357 ;--------------------------------------------------------
                            358 ; overlayable items in internal ram 
                            359 ;--------------------------------------------------------
                            360 	.area OSEG    (OVR,DATA)
                            361 ;--------------------------------------------------------
                            362 ; indirectly addressable internal ram data
                            363 ;--------------------------------------------------------
                            364 	.area ISEG    (DATA)
                            365 ;--------------------------------------------------------
                            366 ; absolute internal ram data
                            367 ;--------------------------------------------------------
                            368 	.area IABS    (ABS,DATA)
                            369 	.area IABS    (ABS,DATA)
                            370 ;--------------------------------------------------------
                            371 ; bit data
                            372 ;--------------------------------------------------------
                            373 	.area BSEG    (BIT)
   0000                     374 _TRANSFER_NOW::
   0000                     375 	.ds 1
                            376 ;--------------------------------------------------------
                            377 ; paged external ram data
                            378 ;--------------------------------------------------------
                            379 	.area PSEG    (PAG,XDATA)
                            380 ;--------------------------------------------------------
                            381 ; external ram data
                            382 ;--------------------------------------------------------
                            383 	.area XSEG    (XDATA)
                            384 ;--------------------------------------------------------
                            385 ; absolute external ram data
                            386 ;--------------------------------------------------------
                            387 	.area XABS    (ABS,XDATA)
                            388 ;--------------------------------------------------------
                            389 ; external initialized ram data
                            390 ;--------------------------------------------------------
                            391 	.area XISEG   (XDATA)
                            392 	.area HOME    (CODE)
                            393 	.area GSINIT0 (CODE)
                            394 	.area GSINIT1 (CODE)
                            395 	.area GSINIT2 (CODE)
                            396 	.area GSINIT3 (CODE)
                            397 	.area GSINIT4 (CODE)
                            398 	.area GSINIT5 (CODE)
                            399 	.area GSINIT  (CODE)
                            400 	.area GSFINAL (CODE)
                            401 	.area CSEG    (CODE)
                            402 ;--------------------------------------------------------
                            403 ; global & static initialisations
                            404 ;--------------------------------------------------------
                            405 	.area HOME    (CODE)
                            406 	.area GSINIT  (CODE)
                            407 	.area GSFINAL (CODE)
                            408 	.area GSINIT  (CODE)
                            409 ;--------------------------------------------------------
                            410 ; Home
                            411 ;--------------------------------------------------------
                            412 	.area HOME    (CODE)
                            413 	.area HOME    (CODE)
                            414 ;--------------------------------------------------------
                            415 ; code
                            416 ;--------------------------------------------------------
                            417 	.area CSEG    (CODE)
                            418 ;------------------------------------------------------------
                            419 ;Allocation info for local variables in function 'init_sio'
                            420 ;------------------------------------------------------------
                            421 ;speed                     Allocated to registers 
                            422 ;------------------------------------------------------------
                            423 ;	SRC/async.c:20: void init_sio(unsigned char speed) {
                            424 ;	-----------------------------------------
                            425 ;	 function init_sio
                            426 ;	-----------------------------------------
   0000                     427 _init_sio:
                    0002    428 	ar2 = 0x02
                    0003    429 	ar3 = 0x03
                    0004    430 	ar4 = 0x04
                    0005    431 	ar5 = 0x05
                    0006    432 	ar6 = 0x06
                    0007    433 	ar7 = 0x07
                    0000    434 	ar0 = 0x00
                    0001    435 	ar1 = 0x01
   0000 85 82 8D            436 	mov	_TH1,dpl
                            437 ;	SRC/async.c:22: TMOD |= 0x20; 	//Таймер 1 будет работать в режиме autoreload
   0003 43 89 20            438 	orl	_TMOD,#0x20
                            439 ;	SRC/async.c:23: TCON |= 0x40;
   0006 43 88 40            440 	orl	_TCON,#0x40
                            441 ;	SRC/async.c:25: SCON = 0x50;  	//Настройки последовательного канала: Режим 1(8 бит данных,
   0009 75 98 50            442 	mov	_SCON,#0x50
                            443 ;	SRC/async.c:27: ES = 0;
   000C C2 AC               444 	clr	_ES
                            445 ;	SRC/async.c:28: wFIFO.RP = wFIFO.WP = rFIFO.RP = rFIFO.WP = 0;
   000E 75*23 00            446 	mov	(_rFIFO + 0x0011),#0x00
   0011 75*22 00            447 	mov	(_rFIFO + 0x0010),#0x00
   0014 75*11 00            448 	mov	(_wFIFO + 0x0011),#0x00
   0017 75*10 00            449 	mov	(_wFIFO + 0x0010),#0x00
                            450 ;	SRC/async.c:29: TRANSFER_NOW = 0;
   001A C2*00               451 	clr	_TRANSFER_NOW
                            452 ;	SRC/async.c:30: SetVector(0x2023, (void *)SIO_ISR);
   001C 7Ar9A               453 	mov	r2,#_SIO_ISR
   001E 7Bs01               454 	mov	r3,#(_SIO_ISR >> 8)
   0020 7C 80               455 	mov	r4,#0x80
   0022 C0 02               456 	push	ar2
   0024 C0 03               457 	push	ar3
   0026 C0 04               458 	push	ar4
   0028 90 20 23            459 	mov	dptr,#0x2023
   002B 12s00r00            460 	lcall	_SetVector
   002E 15 81               461 	dec	sp
   0030 15 81               462 	dec	sp
   0032 15 81               463 	dec	sp
   0034 22                  464 	ret
                            465 ;------------------------------------------------------------
                            466 ;Allocation info for local variables in function 'PushFIFO'
                            467 ;------------------------------------------------------------
                            468 ;c                         Allocated to stack - offset -3
                            469 ;a                         Allocated to registers r2 r3 r4 
                            470 ;sloc0                     Allocated to stack - offset 1
                            471 ;------------------------------------------------------------
                            472 ;	SRC/async.c:34: __bit PushFIFO(struct FIFOb *a, unsigned char c) {
                            473 ;	-----------------------------------------
                            474 ;	 function PushFIFO
                            475 ;	-----------------------------------------
   0035                     476 _PushFIFO:
   0035 C0*00               477 	push	_bp
   0037 85 81*00            478 	mov	_bp,sp
   003A 05 81               479 	inc	sp
   003C 05 81               480 	inc	sp
   003E 05 81               481 	inc	sp
   0040 AA 82               482 	mov	r2,dpl
   0042 AB 83               483 	mov	r3,dph
   0044 AC F0               484 	mov	r4,b
                            485 ;	SRC/async.c:35: if (!((a->RP == 0 && a->WP == FIFOSize - 1) || //если буфер не полон
   0046 74 10               486 	mov	a,#0x10
   0048 2A                  487 	add	a,r2
   0049 FD                  488 	mov	r5,a
   004A E4                  489 	clr	a
   004B 3B                  490 	addc	a,r3
   004C FE                  491 	mov	r6,a
   004D 8C 07               492 	mov	ar7,r4
   004F 8D 82               493 	mov	dpl,r5
   0051 8E 83               494 	mov	dph,r6
   0053 8F F0               495 	mov	b,r7
   0055 12s00r00            496 	lcall	__gptrget
   0058 FD                  497 	mov	r5,a
   0059 70 1F               498 	jnz	00107$
   005B C0 05               499 	push	ar5
   005D 74 11               500 	mov	a,#0x11
   005F 2A                  501 	add	a,r2
   0060 FE                  502 	mov	r6,a
   0061 E4                  503 	clr	a
   0062 3B                  504 	addc	a,r3
   0063 FF                  505 	mov	r7,a
   0064 8C 05               506 	mov	ar5,r4
   0066 8E 82               507 	mov	dpl,r6
   0068 8F 83               508 	mov	dph,r7
   006A 8D F0               509 	mov	b,r5
   006C 12s00r00            510 	lcall	__gptrget
   006F FE                  511 	mov	r6,a
   0070 BE 0F 05            512 	cjne	r6,#0x0F,00114$
   0073 D0 05               513 	pop	ar5
   0075 02s01r06            514 	ljmp	00104$
   0078                     515 00114$:
   0078 D0 05               516 	pop	ar5
   007A                     517 00107$:
                            518 ;	SRC/async.c:36: ((a->RP - a->WP) == 1))) 	{
   007A ED                  519 	mov	a,r5
   007B 33                  520 	rlc	a
   007C 95 E0               521 	subb	a,acc
   007E FE                  522 	mov	r6,a
   007F A8*00               523 	mov	r0,_bp
   0081 08                  524 	inc	r0
   0082 74 11               525 	mov	a,#0x11
   0084 2A                  526 	add	a,r2
   0085 F6                  527 	mov	@r0,a
   0086 E4                  528 	clr	a
   0087 3B                  529 	addc	a,r3
   0088 08                  530 	inc	r0
   0089 F6                  531 	mov	@r0,a
   008A 08                  532 	inc	r0
   008B A6 04               533 	mov	@r0,ar4
   008D A8*00               534 	mov	r0,_bp
   008F 08                  535 	inc	r0
   0090 86 82               536 	mov	dpl,@r0
   0092 08                  537 	inc	r0
   0093 86 83               538 	mov	dph,@r0
   0095 08                  539 	inc	r0
   0096 86 F0               540 	mov	b,@r0
   0098 12s00r00            541 	lcall	__gptrget
   009B FF                  542 	mov	r7,a
   009C C0 02               543 	push	ar2
   009E C0 03               544 	push	ar3
   00A0 C0 04               545 	push	ar4
   00A2 EF                  546 	mov	a,r7
   00A3 FA                  547 	mov	r2,a
   00A4 33                  548 	rlc	a
   00A5 95 E0               549 	subb	a,acc
   00A7 FB                  550 	mov	r3,a
   00A8 ED                  551 	mov	a,r5
   00A9 C3                  552 	clr	c
   00AA 9A                  553 	subb	a,r2
   00AB FD                  554 	mov	r5,a
   00AC EE                  555 	mov	a,r6
   00AD 9B                  556 	subb	a,r3
   00AE FE                  557 	mov	r6,a
   00AF BD 01 0B            558 	cjne	r5,#0x01,00115$
   00B2 BE 00 08            559 	cjne	r6,#0x00,00115$
   00B5 D0 04               560 	pop	ar4
   00B7 D0 03               561 	pop	ar3
   00B9 D0 02               562 	pop	ar2
   00BB 80 49               563 	sjmp	00104$
   00BD                     564 00115$:
   00BD D0 04               565 	pop	ar4
   00BF D0 03               566 	pop	ar3
   00C1 D0 02               567 	pop	ar2
                            568 ;	SRC/async.c:37: a->buf[a->WP] = c;
   00C3 EF                  569 	mov	a,r7
   00C4 2A                  570 	add	a,r2
   00C5 FA                  571 	mov	r2,a
   00C6 E4                  572 	clr	a
   00C7 3B                  573 	addc	a,r3
   00C8 FB                  574 	mov	r3,a
   00C9 8A 82               575 	mov	dpl,r2
   00CB 8B 83               576 	mov	dph,r3
   00CD 8C F0               577 	mov	b,r4
   00CF A8*00               578 	mov	r0,_bp
   00D1 18                  579 	dec	r0
   00D2 18                  580 	dec	r0
   00D3 18                  581 	dec	r0
   00D4 E6                  582 	mov	a,@r0
   00D5 12s00r00            583 	lcall	__gptrput
                            584 ;	SRC/async.c:38: if (++(a->WP) > FIFOSize - 1)
   00D8 0F                  585 	inc	r7
   00D9 A8*00               586 	mov	r0,_bp
   00DB 08                  587 	inc	r0
   00DC 86 82               588 	mov	dpl,@r0
   00DE 08                  589 	inc	r0
   00DF 86 83               590 	mov	dph,@r0
   00E1 08                  591 	inc	r0
   00E2 86 F0               592 	mov	b,@r0
   00E4 EF                  593 	mov	a,r7
   00E5 12s00r00            594 	lcall	__gptrput
   00E8 C3                  595 	clr	c
   00E9 74 8F               596 	mov	a,#(0x0F ^ 0x80)
   00EB 8F F0               597 	mov	b,r7
   00ED 63 F0 80            598 	xrl	b,#0x80
   00F0 95 F0               599 	subb	a,b
   00F2 50 0F               600 	jnc	00102$
                            601 ;	SRC/async.c:39: a->WP = 0; //проверка выхода указателя за границы буфера
   00F4 A8*00               602 	mov	r0,_bp
   00F6 08                  603 	inc	r0
   00F7 86 82               604 	mov	dpl,@r0
   00F9 08                  605 	inc	r0
   00FA 86 83               606 	mov	dph,@r0
   00FC 08                  607 	inc	r0
   00FD 86 F0               608 	mov	b,@r0
   00FF E4                  609 	clr	a
   0100 12s00r00            610 	lcall	__gptrput
   0103                     611 00102$:
                            612 ;	SRC/async.c:40: return 1;
   0103 D3                  613 	setb	c
   0104 80 01               614 	sjmp	00108$
   0106                     615 00104$:
                            616 ;	SRC/async.c:42: return 0;
   0106 C3                  617 	clr	c
   0107                     618 00108$:
   0107 85*00 81            619 	mov	sp,_bp
   010A D0*00               620 	pop	_bp
   010C 22                  621 	ret
                            622 ;------------------------------------------------------------
                            623 ;Allocation info for local variables in function 'PopFIFO'
                            624 ;------------------------------------------------------------
                            625 ;a                         Allocated to registers r2 r3 r4 
                            626 ;c                         Allocated to registers r2 
                            627 ;sloc0                     Allocated to stack - offset 1
                            628 ;------------------------------------------------------------
                            629 ;	SRC/async.c:46: unsigned char PopFIFO(struct FIFOb *a) {
                            630 ;	-----------------------------------------
                            631 ;	 function PopFIFO
                            632 ;	-----------------------------------------
   010D                     633 _PopFIFO:
   010D C0*00               634 	push	_bp
   010F 85 81*00            635 	mov	_bp,sp
   0112 05 81               636 	inc	sp
   0114 05 81               637 	inc	sp
   0116 05 81               638 	inc	sp
   0118 AA 82               639 	mov	r2,dpl
   011A AB 83               640 	mov	r3,dph
   011C AC F0               641 	mov	r4,b
                            642 ;	SRC/async.c:48: if (a->WP == a->RP)
   011E 74 11               643 	mov	a,#0x11
   0120 2A                  644 	add	a,r2
   0121 FD                  645 	mov	r5,a
   0122 E4                  646 	clr	a
   0123 3B                  647 	addc	a,r3
   0124 FE                  648 	mov	r6,a
   0125 8C 07               649 	mov	ar7,r4
   0127 8D 82               650 	mov	dpl,r5
   0129 8E 83               651 	mov	dph,r6
   012B 8F F0               652 	mov	b,r7
   012D 12s00r00            653 	lcall	__gptrget
   0130 FD                  654 	mov	r5,a
   0131 A8*00               655 	mov	r0,_bp
   0133 08                  656 	inc	r0
   0134 74 10               657 	mov	a,#0x10
   0136 2A                  658 	add	a,r2
   0137 F6                  659 	mov	@r0,a
   0138 E4                  660 	clr	a
   0139 3B                  661 	addc	a,r3
   013A 08                  662 	inc	r0
   013B F6                  663 	mov	@r0,a
   013C 08                  664 	inc	r0
   013D A6 04               665 	mov	@r0,ar4
   013F A8*00               666 	mov	r0,_bp
   0141 08                  667 	inc	r0
   0142 86 82               668 	mov	dpl,@r0
   0144 08                  669 	inc	r0
   0145 86 83               670 	mov	dph,@r0
   0147 08                  671 	inc	r0
   0148 86 F0               672 	mov	b,@r0
   014A 12s00r00            673 	lcall	__gptrget
   014D FE                  674 	mov	r6,a
   014E ED                  675 	mov	a,r5
   014F B5 06 05            676 	cjne	a,ar6,00102$
                            677 ;	SRC/async.c:49: return 0;      //если буфер пуст, возвращаем 0
   0152 75 82 00            678 	mov	dpl,#0x00
   0155 80 3D               679 	sjmp	00105$
   0157                     680 00102$:
                            681 ;	SRC/async.c:50: c = a->buf[a->RP]; //извлекаем элемент с индексом RP
   0157 EE                  682 	mov	a,r6
   0158 2A                  683 	add	a,r2
   0159 FA                  684 	mov	r2,a
   015A E4                  685 	clr	a
   015B 3B                  686 	addc	a,r3
   015C FB                  687 	mov	r3,a
   015D 8A 82               688 	mov	dpl,r2
   015F 8B 83               689 	mov	dph,r3
   0161 8C F0               690 	mov	b,r4
   0163 12s00r00            691 	lcall	__gptrget
   0166 FA                  692 	mov	r2,a
                            693 ;	SRC/async.c:51: if (++(a->RP) > FIFOSize - 1)
   0167 0E                  694 	inc	r6
   0168 A8*00               695 	mov	r0,_bp
   016A 08                  696 	inc	r0
   016B 86 82               697 	mov	dpl,@r0
   016D 08                  698 	inc	r0
   016E 86 83               699 	mov	dph,@r0
   0170 08                  700 	inc	r0
   0171 86 F0               701 	mov	b,@r0
   0173 EE                  702 	mov	a,r6
   0174 12s00r00            703 	lcall	__gptrput
   0177 C3                  704 	clr	c
   0178 74 8F               705 	mov	a,#(0x0F ^ 0x80)
   017A 8E F0               706 	mov	b,r6
   017C 63 F0 80            707 	xrl	b,#0x80
   017F 95 F0               708 	subb	a,b
   0181 50 0F               709 	jnc	00104$
                            710 ;	SRC/async.c:52: a->RP = 0; //проверка выхода указателя за границы буфера
   0183 A8*00               711 	mov	r0,_bp
   0185 08                  712 	inc	r0
   0186 86 82               713 	mov	dpl,@r0
   0188 08                  714 	inc	r0
   0189 86 83               715 	mov	dph,@r0
   018B 08                  716 	inc	r0
   018C 86 F0               717 	mov	b,@r0
   018E E4                  718 	clr	a
   018F 12s00r00            719 	lcall	__gptrput
   0192                     720 00104$:
                            721 ;	SRC/async.c:53: return c;
   0192 8A 82               722 	mov	dpl,r2
   0194                     723 00105$:
   0194 85*00 81            724 	mov	sp,_bp
   0197 D0*00               725 	pop	_bp
   0199 22                  726 	ret
                            727 ;------------------------------------------------------------
                            728 ;Allocation info for local variables in function 'SIO_ISR'
                            729 ;------------------------------------------------------------
                            730 ;c                         Allocated to registers r2 
                            731 ;------------------------------------------------------------
                            732 ;	SRC/async.c:57: void SIO_ISR(void) __interrupt(4) {
                            733 ;	-----------------------------------------
                            734 ;	 function SIO_ISR
                            735 ;	-----------------------------------------
   019A                     736 _SIO_ISR:
   019A C0*00               737 	push	bits
   019C C0 E0               738 	push	acc
   019E C0 F0               739 	push	b
   01A0 C0 82               740 	push	dpl
   01A2 C0 83               741 	push	dph
   01A4 C0 02               742 	push	(0+2)
   01A6 C0 03               743 	push	(0+3)
   01A8 C0 04               744 	push	(0+4)
   01AA C0 05               745 	push	(0+5)
   01AC C0 06               746 	push	(0+6)
   01AE C0 07               747 	push	(0+7)
   01B0 C0 00               748 	push	(0+0)
   01B2 C0 01               749 	push	(0+1)
   01B4 C0 D0               750 	push	psw
   01B6 75 D0 00            751 	mov	psw,#0x00
                            752 ;	SRC/async.c:59: if (TI) {
   01B9 30 99 18            753 	jnb	_TI,00105$
                            754 ;	SRC/async.c:60: c = PopFIFO(&wFIFO);
   01BC 90s00r00            755 	mov	dptr,#_wFIFO
   01BF 75 F0 40            756 	mov	b,#0x40
   01C2 12s01r0D            757 	lcall	_PopFIFO
                            758 ;	SRC/async.c:61: if (c) { //если буфер непуст
   01C5 E5 82               759 	mov	a,dpl
   01C7 FA                  760 	mov	r2,a
   01C8 60 06               761 	jz	00102$
                            762 ;	SRC/async.c:62: TRANSFER_NOW = 1;   //происходит передача
   01CA D2*00               763 	setb	_TRANSFER_NOW
                            764 ;	SRC/async.c:63: SBUF = c;
   01CC 8A 99               765 	mov	_SBUF,r2
   01CE 80 02               766 	sjmp	00103$
   01D0                     767 00102$:
                            768 ;	SRC/async.c:66: TRANSFER_NOW = 0; //завершаем цикл передачи - больше нечего передавать
   01D0 C2*00               769 	clr	_TRANSFER_NOW
   01D2                     770 00103$:
                            771 ;	SRC/async.c:67: TI = 0;
   01D2 C2 99               772 	clr	_TI
   01D4                     773 00105$:
                            774 ;	SRC/async.c:69: if (RI) {
   01D4 30 98 0F            775 	jnb	_RI,00108$
                            776 ;	SRC/async.c:70: PushFIFO(&rFIFO, SBUF);
   01D7 C0 99               777 	push	_SBUF
   01D9 90s00r12            778 	mov	dptr,#_rFIFO
   01DC 75 F0 40            779 	mov	b,#0x40
   01DF 12s00r35            780 	lcall	_PushFIFO
   01E2 15 81               781 	dec	sp
                            782 ;	SRC/async.c:71: RI = 0;
   01E4 C2 98               783 	clr	_RI
   01E6                     784 00108$:
   01E6 D0 D0               785 	pop	psw
   01E8 D0 01               786 	pop	(0+1)
   01EA D0 00               787 	pop	(0+0)
   01EC D0 07               788 	pop	(0+7)
   01EE D0 06               789 	pop	(0+6)
   01F0 D0 05               790 	pop	(0+5)
   01F2 D0 04               791 	pop	(0+4)
   01F4 D0 03               792 	pop	(0+3)
   01F6 D0 02               793 	pop	(0+2)
   01F8 D0 83               794 	pop	dph
   01FA D0 82               795 	pop	dpl
   01FC D0 F0               796 	pop	b
   01FE D0 E0               797 	pop	acc
   0200 D0*00               798 	pop	bits
   0202 32                  799 	reti
                            800 ;------------------------------------------------------------
                            801 ;Allocation info for local variables in function 'WriteUART'
                            802 ;------------------------------------------------------------
                            803 ;c                         Allocated to registers r2 
                            804 ;------------------------------------------------------------
                            805 ;	SRC/async.c:77: __bit WriteUART(unsigned char c) {
                            806 ;	-----------------------------------------
                            807 ;	 function WriteUART
                            808 ;	-----------------------------------------
   0203                     809 _WriteUART:
   0203 AA 82               810 	mov	r2,dpl
                            811 ;	SRC/async.c:78: ES = 0;        //отключаем прерывание от UART
   0205 C2 AC               812 	clr	_ES
                            813 ;	SRC/async.c:79: if (PushFIFO(&wFIFO, c)) {//успешное добавление в очередь
   0207 C0 02               814 	push	ar2
   0209 90s00r00            815 	mov	dptr,#_wFIFO
   020C 75 F0 40            816 	mov	b,#0x40
   020F 12s00r35            817 	lcall	_PushFIFO
   0212 15 81               818 	dec	sp
   0214 92*00               819 	mov	b0,c
   0216 50 09               820 	jnc	00104$
                            821 ;	SRC/async.c:80: ES = 1;
   0218 D2 AC               822 	setb	_ES
                            823 ;	SRC/async.c:81: if (!TRANSFER_NOW)
   021A 20*00 02            824 	jb	_TRANSFER_NOW,00102$
                            825 ;	SRC/async.c:82: TI = 1;  //если цикл передачи не начат, искусственно вызываем
   021D D2 99               826 	setb	_TI
   021F                     827 00102$:
                            828 ;	SRC/async.c:84: return 1;
   021F D3                  829 	setb	c
   0220 22                  830 	ret
   0221                     831 00104$:
                            832 ;	SRC/async.c:86: ES = 1;
   0221 D2 AC               833 	setb	_ES
                            834 ;	SRC/async.c:87: return 0; //если буфер полон
   0223 C3                  835 	clr	c
   0224 22                  836 	ret
                            837 ;------------------------------------------------------------
                            838 ;Allocation info for local variables in function 'PrintString'
                            839 ;------------------------------------------------------------
                            840 ;str                       Allocated to registers r2 r3 r4 
                            841 ;------------------------------------------------------------
                            842 ;	SRC/async.c:91: void PrintString(const unsigned char *str) {
                            843 ;	-----------------------------------------
                            844 ;	 function PrintString
                            845 ;	-----------------------------------------
   0225                     846 _PrintString:
   0225 AA 82               847 	mov	r2,dpl
   0227 AB 83               848 	mov	r3,dph
   0229 AC F0               849 	mov	r4,b
                            850 ;	SRC/async.c:92: while (*str != 0) {
   022B                     851 00101$:
   022B 8A 82               852 	mov	dpl,r2
   022D 8B 83               853 	mov	dph,r3
   022F 8C F0               854 	mov	b,r4
   0231 12s00r00            855 	lcall	__gptrget
   0234 FD                  856 	mov	r5,a
   0235 60 18               857 	jz	00104$
                            858 ;	SRC/async.c:93: WriteUART(*(str++));
   0237 0A                  859 	inc	r2
   0238 BA 00 01            860 	cjne	r2,#0x00,00110$
   023B 0B                  861 	inc	r3
   023C                     862 00110$:
   023C 8D 82               863 	mov	dpl,r5
   023E C0 02               864 	push	ar2
   0240 C0 03               865 	push	ar3
   0242 C0 04               866 	push	ar4
   0244 12s02r03            867 	lcall	_WriteUART
   0247 D0 04               868 	pop	ar4
   0249 D0 03               869 	pop	ar3
   024B D0 02               870 	pop	ar2
   024D 80 DC               871 	sjmp	00101$
   024F                     872 00104$:
   024F 22                  873 	ret
                            874 ;------------------------------------------------------------
                            875 ;Allocation info for local variables in function 'ReadUART'
                            876 ;------------------------------------------------------------
                            877 ;c                         Allocated to registers 
                            878 ;------------------------------------------------------------
                            879 ;	SRC/async.c:99: unsigned char ReadUART(void) {
                            880 ;	-----------------------------------------
                            881 ;	 function ReadUART
                            882 ;	-----------------------------------------
   0250                     883 _ReadUART:
                            884 ;	SRC/async.c:101: ES = 0;
   0250 C2 AC               885 	clr	_ES
                            886 ;	SRC/async.c:102: c = PopFIFO(&rFIFO);
   0252 90s00r12            887 	mov	dptr,#_rFIFO
   0255 75 F0 40            888 	mov	b,#0x40
   0258 12s01r0D            889 	lcall	_PopFIFO
                            890 ;	SRC/async.c:103: ES = 1;
   025B D2 AC               891 	setb	_ES
                            892 ;	SRC/async.c:104: return c;
   025D 22                  893 	ret
                            894 	.area CSEG    (CODE)
                            895 	.area CONST   (CODE)
                            896 	.area XINIT   (CODE)
                            897 	.area CABS    (ABS,CODE)
